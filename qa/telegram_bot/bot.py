import os
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

from common.settings import settings
from common.utils import escape_markdown

bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()

MAX_MESSAGE_LENGTH = 4096

async def send_long_message(message: Message, text: str, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram –ø–æ —á–∞—Å—Ç—è–º
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    while text:
        chunk = text[:MAX_MESSAGE_LENGTH]

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–æ—á–∫—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—É—Å–∫–∞
        cut_idx = max(chunk.rfind("\n"), chunk.rfind("."))
        if cut_idx == -1:
            cut_idx = len(chunk)

        part = chunk[:cut_idx+1]
        await message.answer(part, parse_mode=parse_mode)

        text = text[cut_idx+1:]



@dp.message(Command("start"))
async def start(message: Message):
    text = escape_markdown(
        "üéì –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:\n"
        "- –¢–≤–æ—ë –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
        "- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏\n"
        "- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É—á–µ–±–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!"
    )
    await message.answer(text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message()
async def handle_message(message: Message):
    try:
        response = requests.post(
            settings.RAG_CREWAI_URL,
            json={"message": message.text},
            timeout=600
        )

        if response.status_code == 200:
            result = response.json()
            escaped_response = escape_markdown(result['response'])
            await send_long_message(message, escaped_response, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            error_text = escape_markdown("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await message.answer(error_text, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        error_text = escape_markdown(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
        await message.answer(error_text, parse_mode=ParseMode.MARKDOWN_V2)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())